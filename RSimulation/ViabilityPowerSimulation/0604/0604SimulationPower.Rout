
R version 2.15.2 (2012-10-26) -- "Trick or Treat"
Copyright (C) 2012 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> 
> 
> 
> ###############################################
> ##
> ## 04-13-2017
> ## Viability Simulate Under the Power beta!=0
> ###############################################
> 
> 
> ###########################################################################################
> ## Step one
> ## Read in a vector of allele frequencies.
> ## The af list was pulled down from ExAC, filtered by CCDS.r14, rare threhold set at 10%
> ##
> ############################################################################################
> 
> TTN_af <- read.table("/work/AndrewGroup/ViabilitySimulation/QualifyTTN_variants_OnExons.txt", header = T, sep = ",")
> 
> ## loptop file
> #TTN_af <- read.table("D:/PhD/QualifyTTN_variants_OnExons.txt", header = T, sep = ",")
> 
> TTN_af <- TTN_af$Allele.Frequency
> 
> variants.count <- length( TTN_af )
> 
> # head(TTN_af)
> 
> ###########################################################################################
> ## 
> ## Step two
> ## Pass the allele frequencies we got in step-one to a function simulateGenotypes()
> ## Return n1 (the counts of heterozygous variants), n2 (the counts of homozygous variants)
> ##        Pai2g (the sum of Pai2g * Rho) from Equation #8 in the proposal
> ########################################################################################### 
> 
> simulateGenotypes<-function(af.list){
+   
+   len <- length(af.list)   # the length of allele frequencies vector
+   af.sim1 <- runif(n=len, min=0, max=1)               #generate a vector of random double numbers [0,1]
+   af.sim2 <- runif(n=len, min=0, max=1)
+   
+   ## initialize a vector of zeros to store the simulated allele frequencies
+   aflist.sim <- rep(0, len)
+   
+   v1 <- sum(af.sim1 < af.list)                     ## counts of variants happened on gene copy #1
+   v2 <- sum(af.sim2 < af.list)                     ## counts of variants happened on gene copy #2
+   
+   ## calculate indicator I:
+   I <- 0
+     
+   if(v2 > 0 & v1 > 0){
+     I <- 1
+     print( c(v1, v2, I))
+   } 
+ 
+   
+   #################################################
+   n1 <- 0                     ## counts of heterozygous variants
+   n2 <- 0                     ## counts of homozygous variants
+   
+   for(i in 1:len){
+     
+     ### get counts for the homozygous variants
+     if(af.list[i] > af.sim1[i] & af.list[i] > af.sim2[i]){
+       
+       n2 <- n2 + 1
+     } 
+     
+     ### get counts for the heterozygous
+     ## check copy1
+     if(af.list[i] > af.sim2[i]){
+       n1 <- n1 + 1
+       
+       aflist.sim[i] <- aflist.sim[i] + 1
+     } 
+     
+     ## check copy2
+     if( af.list[i] > af.sim1[i]){
+       n1 <- n1 + 1
+       
+       aflist.sim[i] <- aflist.sim[i] + 1
+     }
+     
+     
+   } # end for i in 1:len loop
+ 
+   ###############################################
+   ### calculate Pai2g for current person/genotype
+   Pai2g <- 0
+    
+   if(n2 > 0){
+     Pai2g <- 1
+     
+   } else {
+     
+     if( n1 < 2) {
+       Pai2g <- 0
+       
+     } else {
+       
+       Pai2g <- 1 - (0.5)^(n1 - 1)  
+       
+     }
+     
+   } ## end if-else (n2 >0) condition
+ 
+   
+   return( c(Pai2g, I, aflist.sim))
+   
+ }
> 
> ## test the simulateGenotypes() function
> # for(i in 1:100000){
> #   simulateGenotypes(TTN_af, -1.922, 1.9)
> # }
> 
> ##################################################################
> ##
> ## step 2.5
> ## Calculate the Sum( Pai2g * Rho) for the simulated genotypes
> ################################################################## 
> CalPai2gRho <- function( af.list ){
+   
+   ## print( summary(af.list) )
+   
+   Pai2gRho <- 1
+   for(af in af.list){
+     
+     Pai2gRho <- Pai2gRho * ( 1 - af)
+   }
+   
+   Pai2gRho <- ( 1 - Pai2gRho )^2
+   
+   return(Pai2gRho) 
+   
+ } ## end of CalPai2gRho() function
> 
> ## Pass the population allele frequencies list to the function
> ## CalPai2gRho(TTN_af), got 3.632859e-05, the same result Java returned
> 
> 
> 
> ###########################################################################################
> ##
> ## step three
> ## 
> ## Simulate genotypes for 100k times, get n1, n2, Pai2g Matrix
> ## Perform Rao's Score Test on this set of data simulated
> ## Print the Score and P-value
> ###########################################################################################
> 
> simu100kGenotypes <- function(TTN_af, sample.size, variants.count, alpha, beta){
+   
+   ## initialize a vector of variants af starts at 0
+   variants.sim <- rep(0, variants.count)
+   
+   ## initialize pai2g.sim
+   pai2g.sim <- NULL
+   
+   ## simulate sample.size (200000) genotypes, return the Pai2gs and a vectore of allele counts for each site
+   sample.simed <- 0
+   
+   while( sample.simed < sample.size){
+     
+     genotype <- simulateGenotypes( TTN_af )
+     
+     indicator <- genotype[2]
+     
+     viability <- 1 / ( 1 + exp(alpha + beta * indicator))
+     
+     random.via <- runif(1)
+     
+     if(random.via < viability){
+       
+       ## the first element in the returned genotype vector is the Pai2g simulated for that sample. 
+       pai2g.sim <- c(pai2g.sim, genotype[1])
+       
+       
+       
+       ## delete the first element, and the second element, left simulated variants counts for each site.
+       genotype <- genotype[-1]
+       genotype <- genotype[-1]
+       
+       variants.sim <- variants.sim + genotype
+       
+       
+       sample.simed <- sample.simed + 1
+       
+     } ## end if random.via < viability condition
+     
+     
+   } # end while sample.simed < simple.size loop; 
+   
+   
+   variants.sim <- variants.sim / (sample.size * 2)
+   
+   ## ttn_pai2g_exp <- 3.6328594930727866E-5  
+   ## Pass the simulated variants alleles list to CalPai2gRho() to calculate the Sum{ Pai2g*Rho }
+   ttn_pai2g_exp <- CalPai2gRho( variants.sim )
+   
+   TTN_pai2g.sim <- pai2g.sim 
+   Si.sim <- TTN_pai2g.sim - ttn_pai2g_exp
+   
+   n.sim <- length(Si.sim)
+   
+   ## Statistical t-Test
+   Score.sim = ( sum(Si.sim))^2 / ( n.sim * var(Si.sim) )
+   
+   ## Rao's Scote Test
+    I_beta <- TTN_pai2g.sim^2 - ttn_pai2g_exp^2
+   
+    Score.sim <- ( sum(Si.sim))^2 / (sum(I_beta) )
+   
+   ## Calculate p-values 
+   p.value <- (1 - pchisq(Score.sim, df=1)) 
+   
+   print(paste('len', n.sim, 'Pai2gRho', ttn_pai2g_exp,'score: ', Score.sim, 'Pvalue:', p.value))
+   return( p.value )
+ 
+ }  ## end simu100kGenotypes() function.
> 
> 
> 
> 
> 
> ###########################################################################################
> ##
> ## step four
> ## Perform the simulation for 1000 times, see the PValues returned
> ###########################################################################################
> 
> 
> 
> ###########################################################################################
> ##
> 
> 
> ###########################################################################################
> ## when doing parallel, have to use list<-foreach() to catch all the returned values from all loops!
> 
> 
> ## Try parellel 
> library(foreach)
> library(doMC)
Loading required package: iterators
Loading required package: parallel
> 
> ## set seed
> set.seed(2017)
> 
> ## Create Alpha and Beta
> alpha <- -2.22
> 
> beta.vector <- c(1.0, 5.0)
> 
> ## beta.vector = 0.5, 1.0, 1.5....4.5, 5.0
> 
> 
> 
> sample.size <- 500000
> 
> ######################
> for(beta in beta.vector){
+   
+   PValues <- NULL	  
+   registerDoMC(32)
+   
+   ##############
+   ## the first 1000 samples
+   list <- foreach( i = 1:256) %dopar% {
+     
+     print(c('simulating: ', i))
+     PValues <- c(PValues, simu100kGenotypes(TTN_af, sample.size, variants.count, alpha, beta) )
+     
+   } ## end parallel foreach() loop
+   
+   PValues <- c(PValues, unlist(list) )
+   
+   ## plot Hist into a PDF document
+   pdf(file = paste('histPvalues414Power_sample1ksize200k_beta', beta, '.pdf', sep = '') )
+   
+   ## replace NAs with 0. in the simulated data frame, only when var(Si) = 0, we will get P-value = NA; 
+   PValues[is.na(PValues)] <- 0
+   
+   hist(	PValues, 
+         xlim = c(0,1),
+         breaks = 40, 	
+         main = paste('Hist of P-values, breaks 40','alpha=', alpha,'beta=', beta), 
+         xlab = paste('samples:', length(PValues), 'Pvalues<0.05', mean(PValues<0.05) )	
+   )
+   
+   hist(	PValues, 
+         xlim = c(0,1),
+         breaks = 20, 	
+         main = paste('Hist of P-values, breaks 20','alpha=', alpha,'beta=', beta), 
+         xlab = paste('samples:', length(PValues), 'Pvalues<0.05', mean(PValues<0.05) )	
+   )  
+   
+   ## plot the qq uniform fit
+   y <- qunif(ppoints( length(PValues) ) )
+   qqplot(PValues, y, 
+          main = "qqPlot of uniform distribution")
+   
+   ## finish the pdf ploting
+   dev.off() 
+   
+   ## Print a 'table' of Pvalues we just simulated
+   print(PValues)
+   
+   print( mean(PValues < 0.05) )
+   
+   
+   
+ } ## enf for (beta in beta.vector)
[1] "simulating: " "1"           
[1] "simulating: " "2"           
[1] "simulating: " "3"           
[1] "simulating: " "4"           
[1] "simulating: " "5"           
[1] "simulating: " "6"           
[1] "simulating: " "7"           
[1] "simulating: " "8"           
[1] "simulating: " "9"           
[1] "simulating: " "10"          
[1] "simulating: " "11"          
[1] "simulating: " "13"          
[1] "simulating: " "12"          
[1] "simulating: " "14"          
[1] "simulating: " "15"          
[1] "simulating: " "16"          
[1] "simulating: " "17"          
[1] "simulating: " "18"          
[1] "simulating: " "19"          
[1] "simulating: " "20"          
[1] "simulating: " "21"          
[1] "simulating: " "22"          
[1] "simulating: " "23"          
[1] "simulating: " "25"          
[1] "simulating: " "24"          
[1] "simulating: " "26"          
[1] "simulating: " "27"          
[1] "simulating: " "28"          
[1] "simulating: " "30"          
[1] "simulating: " "29"          
[1] "simulating: " "31"          
[1] "simulating: " "32"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 2 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 2 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 2 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 2 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.71309160405501e-05 score:  0.12974745539387 Pvalue: 0.718694029591764"
[1] "simulating: " "44"          
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.7849067029921e-05 score:  1.42163006963621 Pvalue: 0.233135287875679"
[1] "simulating: " "42"          
[1] "len 500000 Pai2gRho 3.69131775102086e-05 score:  0.104586662900498 Pvalue: 0.746393379808229"
[1] "simulating: " "52"          
[1] "len 500000 Pai2gRho 3.65518089123353e-05 score:  1.96672665788565 Pvalue: 0.160795737830783"
[1] "simulating: " "55"          
[1] "len 500000 Pai2gRho 3.63358713730955e-05 score:  0.00296887944372882 Pvalue: 0.95654682739132"
[1] "simulating: " "39"          
[1] "len 500000 Pai2gRho 3.45486139345368e-05 score:  2.11061521561897 Pvalue: 0.146280498668184"
[1] "simulating: " "36"          
[1] "len 500000 Pai2gRho 3.61204052603372e-05 score:  0.0358686154795883 Pvalue: 0.849787071733846"
[1] "simulating: " "53"          
[1] "len 500000 Pai2gRho 3.61801189115228e-05 score:  2.39002151742095 Pvalue: 0.122111947879136"
[1] "simulating: " "49"          
[1] "len 500000 Pai2gRho 3.68770528693719e-05 score:  0.743364578717082 Pvalue: 0.388585210704728"
[1] "simulating: " "46"          
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.61322501099365e-05 score:  3.08911325885864 Pvalue: 0.0788177489441892"
[1] "simulating: " "48"          
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.67081379005373e-05 score:  19.4470462780395 Pvalue: 1.03427664007727e-05"
[1] "simulating: " "43"          
[1] "len 500000 Pai2gRho 3.54070553402169e-05 score:  0.626571218894874 Pvalue: 0.428615809718524"
[1] "simulating: " "54"          
[1] "len 500000 Pai2gRho 3.55729045749736e-05 score:  2.04835956497329 Pvalue: 0.152370288572011"
[1] "simulating: " "38"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.49352899251688e-05 score:  0.247185558160637 Pvalue: 0.619063821610791"
[1] "simulating: " "35"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.72157106473252e-05 score:  4.83867571324985 Pvalue: 0.0278282574385026"
[1] "simulating: " "60"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.83766502646831e-05 score:  1.7554883864252 Pvalue: 0.185188250765892"
[1] "simulating: " "51"          
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.55846860850305e-05 score:  3.53365986471956 Pvalue: 0.0601349116629109"
[1] "simulating: " "47"          
[1] "len 500000 Pai2gRho 3.60725291551073e-05 score:  2.96400571763409 Pvalue: 0.0851367830208186"
[1] "simulating: " "33"          
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.58341835887969e-05 score:  0.0119018002513334 Pvalue: 0.913126845373782"
[1] "simulating: " "45"          
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.48414063242984e-05 score:  0.10275838584316 Pvalue: 0.74854424189137"
[1] "simulating: " "56"          
[1] "len 500000 Pai2gRho 3.48297753539195e-05 score:  0.0202522433677028 Pvalue: 0.886834850384451"
[1] "simulating: " "40"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.67442156705217e-05 score:  1.06448025995665 Pvalue: 0.302195561263943"
[1] "simulating: " "37"          
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.67081235544418e-05 score:  1.20851634126814 Pvalue: 0.27162615588393"
[1] "simulating: " "50"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.55845746549277e-05 score:  0.678065870472029 Pvalue: 0.410253531273546"
[1] "simulating: " "41"          
[1] "len 500000 Pai2gRho 3.70341379843844e-05 score:  0.00539235302144141 Pvalue: 0.941461842546308"
[1] "simulating: " "34"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.84136100956407e-05 score:  1.50470474062625 Pvalue: 0.219948877406046"
[1] "simulating: " "63"          
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.52650430417046e-05 score:  0.924099223119331 Pvalue: 0.336400947097771"
[1] "simulating: " "62"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.57271134828543e-05 score:  0.720885232064815 Pvalue: 0.395853690438569"
[1] "simulating: " "59"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.49706615580971e-05 score:  1.73551312283059 Pvalue: 0.187708349418733"
[1] "simulating: " "57"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.4911938858899e-05 score:  0.000221580134714822 Pvalue: 0.988123473715158"
[1] "simulating: " "61"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.54070090943687e-05 score:  0.17557978829656 Pvalue: 0.67519974732315"
[1] "simulating: " "64"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] "len 500000 Pai2gRho 3.52061038884259e-05 score:  1.32824200363812 Pvalue: 0.249118208083659"
[1] "simulating: " "58"          
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 2 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 2 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 2 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
[1] 1 1 1
